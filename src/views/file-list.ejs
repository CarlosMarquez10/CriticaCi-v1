<%- include('partials/header', { title: title }) %>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Inicio</a></li>
                    <li class="breadcrumb-item active"><%= folderName %></li>
                </ol>
            </nav>
        </div>
    </div>
    
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <% if (folderType === 'times') { %>
                            <i class="fas fa-stopwatch me-2 text-success"></i>
                        <% } else { %>
                            <i class="fas fa-database me-2" style="color: #ff6b35;"></i>
                        <% } %>
                        <%= folderName %>
                    </h4>
                    <div>
                        <% if (folderType === 'times') { %>
                            <a href="/upload-times" class="btn btn-success">
                                <i class="fas fa-plus me-2"></i>Subir Archivos
                            </a>
                        <% } else { %>
                            <a href="/upload-data" class="btn" style="background: linear-gradient(135deg, #ff6b35 0%, #dc3545 100%); color: white; border: none;">
                                <i class="fas fa-plus me-1"></i>Subir Archivo
                            </a>
                        <% } %>
                    </div>
                </div>
                <div class="card-body">
                    <% if (files && files.length > 0) { %>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Se encontraron <strong><%= files.length %></strong> archivo(s) en esta carpeta.
                        </div>
                        
                        <div class="file-list">
                            <% files.forEach(function(file, index) { %>
                                <div class="file-item d-flex align-items-center justify-content-between fade-in">
                                    <div class="d-flex align-items-center flex-grow-1">
                                        <div class="file-icon me-3">
                                            <% if (file.extension === '.xlsx' || file.extension === '.xls') { %>
                                                <i class="fas fa-file-excel text-success"></i>
                                            <% } else if (file.extension === '.csv') { %>
                                                <i class="fas fa-file-csv text-info"></i>
                                            <% } else if (file.extension === '.txt') { %>
                                                <i class="fas fa-file-alt text-warning"></i>
                                            <% } else { %>
                                                <i class="fas fa-file text-secondary"></i>
                                            <% } %>
                                        </div>
                                        <div class="file-info flex-grow-1">
                                            <h6 class="mb-1 file-name"><%= file.name %></h6>
                                            <small class="text-muted">
                                                Tamaño: <%= formatFileSize(file.size) %> | 
                                                Modificado: <%= new Date(file.modified).toLocaleDateString('es-ES', {
                                                    year: 'numeric',
                                                    month: 'short',
                                                    day: 'numeric',
                                                    hour: '2-digit',
                                                    minute: '2-digit'
                                                }) %>
                                            </small>
                                        </div>
                                    </div>
                                    <div class="file-actions">
                                        <select class="form-select form-select-sm me-2" style="width: auto; display: inline-block;" id="fileType_<%= index %>">
                                            <option value="" selected disabled>Seleccione una</option>
                                            <option value="empleados">empleados</option>
                                            <option value="medidores">medidores</option>
                                            <option value="tiempos">tiempos</option>
                                            <option value="reporte">Reporte</option>
                                        </select>
                                        <button class="btn btn-sm btn-action me-2" 
                        style="background: linear-gradient(135deg, #dc3545 0%, #ff6b35 100%); color: white; border: 1px solid #ff6b35;" 
                                                onclick="runFile('<%= file.name %>', document.getElementById('fileType_<%= index %>').value)"
                                                data-bs-toggle="tooltip" 
                                                title="Ejecutar archivo (funcionalidad próximamente)">
                                            <i class="fas fa-play"></i>
                                            Run
                                        </button>
                                        <button class="btn btn-sm btn-action me-2" 
                                                style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; border: 1px solid #28a745;"
                                                onclick="downloadFile('<%= file.name %>', '<%= folderType %>')"
                                                data-bs-toggle="tooltip" 
                                                title="Descargar archivo">
                                            <i class="fas fa-download"></i>
                                            Descargar
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm btn-action btn-delete" 
                                                onclick="confirmDelete('<%= file.name %>', '<%= folderType %>')"
                                                data-filename="<%= file.name %>"
                                                data-bs-toggle="tooltip" 
                                                title="Eliminar archivo">
                                            <i class="fas fa-trash"></i>
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <div class="text-center py-5">
                            <i class="fas fa-folder-open fa-4x text-muted mb-3"></i>
                            <h5 class="text-muted">No hay archivos en esta carpeta</h5>
                            <p class="text-muted">Sube algunos archivos para comenzar</p>
                            <% if (folderType === 'times') { %>
                                <a href="/upload-times" class="btn btn-success">
                                    <i class="fas fa-upload me-2"></i>Subir Archivos de Tiempos
                                </a>
                            <% } else { %>
                                <a href="/upload-data" class="btn" style="background: linear-gradient(135deg, #ff6b35 0%, #dc3545 100%); color: white; border: none;">
                                <i class="fas fa-upload me-2"></i>Subir Archivos de Datos
                            </a>
                            <% } %>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de confirmación para eliminar -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                    Confirmar Eliminación
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas eliminar el archivo <strong id="fileToDelete"></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Esta acción no se puede deshacer.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash me-2"></i>Eliminar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Variable de configuración para la URL base
const BASE_URL = '<%= baseUrl %>';

// Función para formatear tamaño de archivo (helper function)
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Variables globales para el modal
let fileToDelete = '';
let folderTypeToDelete = '';

// Función para confirmar eliminación
function confirmDelete(filename, folderType) {
    console.log('confirmDelete llamado con:', filename, folderType);
    fileToDelete = filename;
    folderTypeToDelete = folderType;
    document.getElementById('fileToDelete').textContent = filename;
    
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    deleteModal.show();
}

// Función para ejecutar archivo
function runFile(filename, fileType) {
    // Verificar si se ha seleccionado un tipo
    if (!fileType) {
        showAlert('warning', 'Por favor seleccione un tipo antes de ejecutar');
        return;
    }
    
    // Encontrar el índice del archivo en la lista
    const fileItems = document.querySelectorAll('.file-item');
    let fileIndex = -1;
    
    for (let i = 0; i < fileItems.length; i++) {
        const nameElement = fileItems[i].querySelector('.file-name');
        if (nameElement && nameElement.textContent === filename) {
            fileIndex = i;
            break;
        }
    }
    
    if (fileIndex === -1) {
        console.error('No se encontró el archivo en la lista:', filename);
        return;
    }
    
    // Obtener el botón que fue clickeado usando el índice correcto
    const runBtn = document.querySelector(`button[onclick="runFile('${filename}', document.getElementById('fileType_${fileIndex}').value)"]`);
    if (!runBtn) {
        console.error('No se encontró el botón de Run para:', filename);
        return;
    }
    
    const originalContent = runBtn.innerHTML;
    
    // Mostrar estado de carga
    runBtn.disabled = true;
    runBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
    
    if (fileType === 'reporte') {
        // Ejecutar el endpoint de procesamiento completo
        window.open(`${BASE_URL}/api/process/complete`, '_blank');
        // Restaurar el botón después de abrir la ventana
        setTimeout(() => {
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            showAlert('success', 'Procesando reporte completo. Se abrirá una nueva ventana.');
        }, 1000);
        return;
    } else if (fileType === 'empleados') {
        // Ejecutar el endpoint de empleados
        fetch(`${BASE_URL}/api/empleados/importar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ filename: filename })
        })
        .then(response => response.json())
        .then(data => {
            // Restaurar el botón
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            
            if (data.success) {
                showAlert('success', `Archivo "${filename}" procesado correctamente como ${fileType}`);
            } else {
                showAlert('danger', `Error al procesar el archivo "${filename}": ${data.message}`);
            }
        })
        .catch(error => {
            // Restaurar el botón
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            
            console.error('Error:', error);
            showAlert('danger', `Error al procesar el archivo "${filename}": ${error.message}`);
        });
    } else if (fileType === 'medidores') {
        // Ejecutar el endpoint de medidores
        fetch(`${BASE_URL}/api/medidores/load`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            // Restaurar el botón
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            
            if (data.success) {
                showAlert('success', `Se insertaron ${data.inserted} registros correctamente`);
            } else {
                showAlert('danger', `Error al procesar el archivo: ${data.message || 'Error desconocido'}`);
            }
        })
        .catch(error => {
            // Restaurar el botón
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            
            console.error('Error:', error);
            showAlert('danger', `Error al procesar el archivo: ${error.message}`);
        });
    } else if (fileType === 'tiempos') {
        // Ejecutar el endpoint de tiempos
        fetch(`${BASE_URL}/api/load`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ filename: filename })
        })
        .then(response => response.json())
        .then(data => {
            // Restaurar el botón
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            
            if (data.ok) {
                showAlert('success', `Se insertaron ${data.inserted} registros correctamente del archivo ${data.file}`);
            } else {
                showAlert('danger', `Error al procesar el archivo: ${data.message || 'Error desconocido'}`);
            }
        })
        .catch(error => {
            // Restaurar el botón
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            
            console.error('Error:', error);
            showAlert('danger', `Error al procesar el archivo: ${error.message}`);
        });
    } else {
        // Tipo no reconocido
        setTimeout(() => {
            runBtn.disabled = false;
            runBtn.innerHTML = originalContent;
            showAlert('warning', `Tipo de archivo "${fileType}" no soportado`);
        }, 500);
    }
}


// Función para descargar archivo
function downloadFile(filename, folderType) {
    const downloadUrl = `/api/files/${folderType}/${encodeURIComponent(filename)}/download`;
    
    // Crear un enlace temporal para la descarga
    const link = document.createElement('a');
    link.href = downloadUrl;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showAlert('success', `Descargando archivo: ${filename}`);
}

// Event listener para el botón de confirmación
document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    console.log('Intentando eliminar:', fileToDelete, 'del tipo:', folderTypeToDelete);
    if (fileToDelete && folderTypeToDelete) {
        deleteFile(fileToDelete, folderTypeToDelete);
        bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
    } else {
        console.error('Variables no definidas:', { fileToDelete, folderTypeToDelete });
    }
});

// Función para eliminar archivo
function deleteFile(filename, folderType) {
    console.log('deleteFile llamado con:', filename, folderType);
    
    // Validar que tenemos los parámetros necesarios
    if (!filename || !folderType) {
        console.error('Parámetros faltantes:', { filename, folderType });
        return;
    }
    
    const deleteBtn = document.querySelector(`[data-filename="${filename}"]`);
    if (!deleteBtn) {
        console.error('No se encontró el botón de eliminar para:', filename);
        return;
    }
    
    const originalContent = deleteBtn.innerHTML;
    
    // Mostrar estado de carga
    deleteBtn.disabled = true;
    deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    
    const deleteUrl = `/api/files/${folderType}/${encodeURIComponent(filename)}`;
    console.log('URL de eliminación:', deleteUrl);
    
    fetch(deleteUrl, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        console.log('Respuesta del servidor:', response.status, response.statusText);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Datos recibidos:', data);
        if (data.success) {
            // Recargar la página después de un breve delay
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            deleteBtn.disabled = false;
            deleteBtn.innerHTML = originalContent;
        }
    })
    .catch(error => {
        console.error('Error completo:', error);
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalContent;
    });
}

// Inicializar tooltips
document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>

<%
// Helper function para formatear tamaño de archivo
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
%>

<%- include('partials/footer') %>